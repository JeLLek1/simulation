git init - inicjalizacja projektu

git add - dodanie pliku do przechowalni(
	nazwa_pliku.roz lub .-dodawanie wszystkich plików do poczekalni)
	
git status - kolejka plików które mogą zostać dodane do repozytorium, a które nie są dodane

git commit - dodanie do repozytorium 
	-m "Tutaj komentarz" - raczej nie urzyteczne. bez niej uruchomi domyślny edytor i tam nalerzy uzupełniać
	Komentarze:
		Bez flagi m uruchomi domyślny edytor
		- podział na tytuł i treść oddzielone 2x enter między tytułem i treścią 
		- tytuł max 50 znaków bo -oneline wyświetla komentarz krótki
		- rozpoczynanie wiersza wielką literą
		- nie dodawanie kropki na końcu tytułu
		- tytuł jasny np dodanie formularza email
		- max 72 znaki w linii bo może nie łamać konsolka
		- treść komentarza z dokładnym opisem co i dlaczego
		
	
git clean - usunięcie plików które nigdy nie były w kolejce (uwaga usuwa na zawsze.) 
	-n (pokazuje spis plików które zostaną usunięte)
	-d (obsługa katalogów)
	-i (tryb interaktywny usuwania pyta po kolei o pliki)
	-x (pomoc w usuwaniu plików systemowych)
	
git reset - usunięcie z koleiki oczekiwania, ale nie potrzebne XD. Wykorzystujemy tylko na prywatnym kommicie tylko
	--mixed - tryb domyślnie. Wszystkie nowsze commity zostaną usunięte
	--soft  - na stage zostaną dodane i będzie można zaakceptować
	--hard  - na siłę 
	
git checkout
	--nazwa.roz - usunięcie zmian które wprowadzono do tych które są w repozytorium
	HASH - projekt zostanie ustawiony na wersję z HASHem podczas dodawania tej zmiany
	master - wrócenie do gałęzi głównej
	HASH sciezka/xd.xd - przywrócenie z danej modyfikacji wybranego pliku. uwaga można przez przypadek zepsuć sobie projekt XD
git revert - odwrócenie zmian z wybranego komitu i zapisanie go jako nowy komit. Bezpieczne przywracania zmian. Nie usuwa i nie modyfikuje historii
	HASH - zmiany zostają dodane do tamtego commitu.
	
	
git log - pokazuje historię z id (HASH)
	--oneline -krótka czytelna wersja z którkimi HASHami
	--help - dokumentacja
	--author="Adam" po autorze tylko
	--grep="slowo" Szuka po słowie
	--oneline -3 tylko 3 wyniki
	--oneline --sciezka/xd podaje zmiany tylko podanego katalogu
	--oneline --patch --sciezka/xd Pokazuje bardzo szczegółowe dane zmian danej ścieżki
	--oneline --summary --sciezka/xd Skrócona wersja zmian danej sciezki
	--oneline --stat --sciezka/xd statystyki sciezki
	--format="" styl formatowania w którym zostanie pokazane wszystko np. %h - skrócony hash %an - autor %s -komentarz (%cr) - kiedy został dodany
	
git shortlog - zmiany w projekcie z podziałem na osoby

git rm nazwa.roz - usunięcie pliku z repozytorium, usuwa także z roboczego.
	przywrócenie:
	git reset
	git checkout nazwa.roz

rozdział na różne branche
git branch - lista gałęzi
	nazwa - dodanie nowej gałęzi
	-d nazwa - usuwanie gałęzi po nazwie np po merge
	Dobre praktyky podział gałęzi i łączenie ich:
		-master - stablina wersja projektu 
		-dev - do testowania aplikacji zwykle z środowiskiem ^
		-feature - do prac nad nowymi funkcjami ^
		-user - do indywidualnych prac członków zespołu ^ - kolejność w górę 
		-test/bugfix - testowanie i zmiany przy błędach - kolejność od razu do dev
git merge nazwa - łączenie obecnego projektu z tym po nazwie, uwaga żeby znajdować się na głównej gałęzi
git checkout nazwa - zmiana na inną gałąź
git branch - spis aktywnego i reszty gałęzie
git stash - zmiany z katalogu są dodane poza kolejke, dzięki temu można zmienić gałąź
	pop - przywracanie do kolejki i zostają na stosie
		identyfikator - bo domyślnie przywraca ostatnią zmianę, a można po id przywrócić też inne
	push - dodanie z komentarzem 
		-u z zapisem nieśledzonych plików
	list - lista z komentarzem dodanych poza kolejkę plików
	apply - zmiany zostają przywrócone do katalogu roboczego i zostają na stosie
	drop id - usuwa tylko to z id
	clear - czyści cały stos 
	git stash branch nazwa - dodanie nowej gałęzi z rzeczami w stosie

Repozytorium zdalne:
	np inny komputer albo katalog albo github
	
	git remote add origin 'link' - to zostanie podane już po linku
	git pusch - wysłanie zmian z lokalnego do zdalnego repo
		-u origin master - obecna gałąź zostanie połączona z tą na którą chcemy wysłać czyli tu master
	git fetch - pobranie zmian z zdalnego do lokalnego repo

.gitignore - plik z ignorowanymi plikami